---
title: "Core_ERM_W1_Notes"
author: "Er1kKa"
format: html
editor: visual
---

# Week 1 Part 1

## Video 1: Basics

```{r}
# comments


# assignment operator <-

x <- 3 # use <- to assign value
        # read as "x gets 3"

y <- 2 * x # we need to use * for multiplication, implied multiplication does not work

y <- exp(1)
y <- 2^8


# data types

print(typeof(x))

x <- 3L
print(typeof(x))


# log operators

# distinguish == / identical() or all.equal() which uses near equality

all.equal(x, y)

```

## Exercise 1

1.  Why does this code throw an error? Try to fix it.

```         
x <- 3; x > 2 & < 9
```

```{r}
x <- 3
(x > 2) & (x < 9)
```

2.  Does `(NA & TRUE)` equal `(NA | TRUE)`? Explain.

3.  Does `(Inf - Inf)` equal `(Inf - 1)`? Explain.

4.  Run the following. What happens? [(further reading)](https://www.econometrics.blog/post/street-fighting-numerical-analysis-part-1/)

``` r
y <- (1 - 0.8); z <- 0.2
y == z; y < z; all.equal(y, z); identical(y, z)
```

```{r}
y <- (1 - 0.8); z <- 0.2
y == z; y < z; all.equal(y, z); identical(y, z)
```

5.  Why do I use double quotes here?

```         
important_message <- "The harder you try, the more you'll learn."
```

## Video 2: Atomic Vectors

Clear variables in the environment

```{r}
rm(list = ls())
```

Atomic Vectors: Basics

```{r}
x <- c(1, 2, 3, 5, 8) # index starts from 1 in R!!!!
y <- 23:59
x
y
length(x)
typeof(x)
```

Subsetting

```{r}
x[c(1, 3, 5)] # index using another atomic vector
x[c(-1, -4)] # negative indices remove elements
x[c(TRUE, FALSE, FALSE, FALSE, TRUE)] # logic vector as indices
x[6] # out of range index gets NA
```

Nearly all R functions are vectorised

```{r}
x <- (-2:2)
y <- c(1, 2, 3, 5, 8)
x^y
x + y
sum(x)
prod(y)
```

Even relational/logical operators are vectorised

```{r}
z <- c(TRUE, TRUE, FALSE)
w <- c(FALSE, FALSE, FALSE)
z & w
any(x > y)
all(x > y)
```

Recycling: R allows for operations with vectors of different lengths

-   but this is dangerous! only use recycling when having "scalar with vectors" operations

```{r}
a <- c(1, 22)
x + a
x * 2

```

Replacing elements of a vector

```{r}
x[2] <- 5
x
```

Naming/Renaming elements of a vector:

```{r}
x <- c("first" = 1, "second" = 2, "third" = 256)
x["second"]
names(x)[2] <- "no_name"
x
```

Set operations

```{r}
union(x, y)
x %in% y
```

Coercion

```{r}
x <- c(1, TRUE, "3")
x
as.double(x)
```

## Video 3: Functions and Control Flow

`\()` is shorthand for `function()`

```{r}
# define a function
raw_moment <- \(x, k) {
  mean(x^k)
}
raw_moment(x = 1, k = 2)
```

Supply any number of extra arguments

```{r}
raw_moment <- function(x, k, ...) {
  mean(x^k, ...)
}
raw_moment(c(1, 2, NA), 2, na.rm = TRUE)
```

Scope: we also distinguish between local and global variables in R

`if()` statements

```{r}
if (3 > 5) {
  print("nonsense")
}
```

Early returns

```{r}
square_root <- \(x) {
  if (x < 0) {
    return("number smaller than 0")
  }
  sqrt(x)
}
square_root(-1)
```

If-else

```{r}
say_hi <- function(time) {
  if (time > 1900) {
    print("good evening")
  } else {
    print("good day")
  }
}
say_hi(1200)
```

if-else if-else

```{r}
say_hi <- function(time) {
  if (time > 1900) {
    print("good evening")
  } else if (time < 1000) {
    print("good morning")
  } else {
    print("good day")
  }
}
say_hi(0900)
```

Lookup tables

`if ()` trees are best for *running different code* in each branch; lookup tables are best for *assigning different values* in each branch.

```{r}
get_grades <- \(name) {
  grades <- c("Yangyang" = 100, "Xiaotian" = 0, "Changzhe" = 100)
  grades[name]
}
get_grades("Xiaotian")
```

## Video 4: Iteration

`for()` loop

```{r}
for (i in c(1, 2, 3, 999)) {
  print(i^2)
}
```

```{r}
empty_function <- \() {
  for (i in 1:3) {
    print(i^2)
  }
}
empty_function()
```

`while` loop

```{r}
i <- 1
while (i < 10) {
  print(i)
  i <- i + 1
}
```

## Video 5: Matrices and Arrays

```{r}
rm(list = ls())
```

Attributes

```{r}
x <- c("Name" = "xiaotian", "Grades" = 50, "Pass" = TRUE)
attributes(x)
```

Generate matrix by giving vector dim

```{r}
x <- 1:6
dim(x) <- c(2, 3)
x
```

A matrix is just an atomic vector with dimensions!

Matrix / array operations are usually **very fast!**

Generate matrix using `matrix()`

```{r}
x <- matrix(data = 1:9, nrow = 3, ncol = 3)
x
y <- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = TRUE)
y
```

Diagonal matrices

```{r}
diag(y)
d1 <- diag(1:4)
d1
i <- diag(nrow = 4)
i
```

Accessing elements

```{r}
M <- matrix(1:20, 4, 5)
M
M[3, 3]
M[1:2, 1:3]
M[c(TRUE, TRUE, FALSE, FALSE),
  c(TRUE, FALSE, FALSE, FALSE, FALSE)]
M[1, ]
```

Binding

```{r}
x <- 1:3
y <- c(0, 0, 0)
cbind(x, y)
rbind(x, y)
cbind(diag(nrow = 3), diag(c(1, 2, 3)))
```

Index Matrix with another matrix

```{r}
M = matrix(data = 1:16, nrow = 4, ncol = 4)
index = cbind(diag(1, 2, 3), diag(1, 2, 3))
M[index]
```

Matrix product

```{r}
G = matrix(data = c(1, 0, 0, 0 ), ncol = 1, nrow = 4)
M %*% G # matrix product
1:2 %o% 1:2 # outer product
```

Matrix can have row/col names

```{r}
rownames(M) <- c("A", "B", "C", "D")
colnames(M) <- c("x", "y", "z", "t")
M
```

`Drop` deletes redundant dimensions

```{r}
M[, "t"]
M[, "t", drop = FALSE]
```

## Video 6: Lists and Dataframes

Creating list

```{r}
list1 <- list(c(1, 2, 3), TRUE, "lol")
```

`str()` tells us what's inside

```{r}
str(list1)
```

Index

```{r}
list1[1:2]
list[1]
```

Named list

```{r}
final <- list("xiaotian" = "pass", "marks" = 50)
final["xiaotian"]
final$xiaotian
final["marks"]
```

Creating dataframe

```{r}
students <- data.frame("name" = c("xiaotian", "yangyang"),
                       "grades" = c(50, 100))
students
```

Index

```{r}
students[1, 2]
students[1, ]
students$name
students[students$name == "yangyang"]
```

## Lecture 1

```{r}
rm(list = ls()) # clear variables
```

Exercise 1

```{r}
cents <- 73
quarters <- cents %/% 25
cents <- cents %% 25

dimes <- cents %/% 10 # Delete the underscores & fill in the gap!
cents <- cents %% 10 # ditto! 

nickels <- cents %/% 5 # ditto!
cents   <- cents %% 5 # ditto! 

change <- c('quarters' = quarters,
            'dimes' = dimes,
            'nickels' = nickels,
            'pennies' = cents)

change
```

Exercise 2

```{r}
# Define make_change_US().

# In R, you define functions as follows:
make_change_US <- function(cents) {
  quarters <- cents %/% 25
  cents <- cents %% 25
  
  dimes <- cents %/% 10 
  cents <- cents %% 10 
  
  nickels <- cents %/% 5
  cents   <- cents %% 5
  
  result <- c('quarters' = quarters,
              'dimes' = dimes,
              'nickels' = nickels,
              'pennies' = cents)
  
  return(result)
}

make_change_US(76)
```

Exercise 3

```{r}

# First, define make_change().

make_change <- \(cents, currency) {
  # create empty result vector
  change = c()
  
  # loop over all coin names
  for (coin_name in names(currency)) {
    change[coin_name] <- cents %/% currency[coin_name]
    cents <- cents %% currency[coin_name]
  }
  
  # return the result
  return(change)
}


# Then, define the US and UK currency arguments that enter make_change().

currency_US <- c('quarter' = 25, 'dime' = 10, 'nickel' = 5, 'penny' = 1)
currency_UK <- c('50p' = 50, '20p' = 20, '10p' = 10, '5p' = 5, '2p' = 2, '1p' = 1)

# Test your function for 78 cents/pence.

make_change(78, currency_UK)


# Compare to make_change_US(78) to double-check.
```

# Week 1 Part 2

```{r}
rm(list = ls()) # clear variables
```

## `dplyr`

```{r}
library(dplyr) # library dplyr
library(gapminder) # library gapminder

```

Pipe operator `|>` passes the previous variable as the 1st argument of the next command.

Dataset:

```{r}
gapminder
```

dplyr basics:

```{r}
gapminder |>
  select(country, continent, year, lifeExp) |>
  mutate(popMillion = pop / 1000000) |> # by default, this returns a new tibble instead of changing the original one
  filter(year == 2007) |>
  arrange(desc(lifeExp)) |>
  group_by(continent) |>
  summarise(avgLifeExp = mean(lifeExp))
```

## Lecture 2

```{r}
rm(list = ls())
```

Quiz 1

```{r}
# load data
gdp_growth <- c(2.5, 3.1, -1.2, 0.5, 4.0)

# loop over elements in the vector
for (number in gdp_growth) {
  if (number < 0) {
    print("Recession")
  } else if (number > 0) {
    print("Expansion")
  }
  else {
    print("Neutral")
  }
}
```

Quiz 2

```{r}
# load data
twoTruths <- read.csv("https://ditraglia.com/data/two-truths-and-a-lie-2025.csv")

# quiz
twoTruths |>
  group_by(certainty) |>
  summarise(correct_rate = mean(correct))
```

# Week 1 Part 3

## `ggplot2`

Load all tidyverse packages and sample dataset

```{r}
rm(list = ls())
library(tidyverse)
library(gapminder)

gapminder_2007 <- gapminder |>
  filter(year == 2007)
```

Basic scattplot

```{r}
ggplot(data = gapminder_2007,
       mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

Another method: use \|\>

```{r}
gapminder_2007 |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

Log scale

```{r}
gapminder_2007 |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
  scale_x_log10()
```

We can update the plot step by step:

```{r}
myplot <- gapminder_2007 |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point()

myplot +
  scale_x_log10()
```

Add titles and axis labels

```{r}
myplot +
  labs(title = "Title",
       substitle = "Subtitle",
       caption = "Caption") +
  xlab("GDP / Capita") +
  ylab("Life Expectancy (years)")
```

-   **`ggplot2` Syntax Basics**

    -   Combine **data** with **aesthetic mapping** and **geom**

    -   `mapping = aes(x = gdpPerCap, y = lifeExp)`

        -   `aes` is short for **aesthetic**

        -   maps `gdpPerCap` to the x-coordinate

        -   maps `lifeExp` to the y-coordinate

    -   `geom_point()` is a *geometric object*, **geom** for short

        -   Uses the mapping to create a scatterplot

Aesthetics

```{r}
gapminder_2007 |>
  ggplot(aes(x = gdpPercap, y = lifeExp,
             color = continent,
             size = pop)) +
  geom_point() +
  scale_x_log10()
```

Faceting: plots for multiple subsets

```{r}
gapminder |>
  filter(year %in% c(1952, 1972, 1992)) |> # equivalent to year == 1952 | year == 1972 | year == 1992
  ggplot(aes(x = gdpPercap, y = lifeExp,
             colour = continent,
             size = pop)) +
  geom_point() +
  scale_x_log10() +
  facet_wrap(~ year) # facet wrt year
```

Plot summarised data

```{r}
gapminder |>
  mutate(popMil = pop / 1000000) |>
  group_by(year, continent) |>
  summarise(totalPopMil = sum(popMil)) |>
  ggplot(aes(x = year, y = totalPopMil,
             color = continent)) +
  geom_line() +
  ylab("Total Population (Millions)")
```

Histogram

```{r}
gapminder_2007 |>
  ggplot(aes(x = lifeExp)) +
  geom_histogram(bandwidth = 1)
```

Boxplot

-   **Whiskers**: max and min; **Box**: middle 50% of data

-   **Lines**: 25th percentile, median, 75th percentile

-   **Dots**: observations >(1.5×IQR)>(1.5×IQR) from box

```{r}
gapminder_2007 |>
  ggplot(aes(y = lifeExp)) +
  geom_boxplot()
```

Multiple Boxplots

```{r}
gapminder_2007 |>
  ggplot(aes(x = continent, y = lifeExp)) +
  geom_boxplot()
```

Bar plots

```{r}
gapminder_2007_byContinent <- gapminder_2007 |>
  group_by(continent) |>
  summarise(meanLifeExp = mean(lifeExp))

gapminder_2007_byContinent |>
  ggplot(aes(x = continent, y = meanLifeExp)) +
  geom_col()
```

Rotated bar plot and set theme

```{r}
gapminder_2007_byContinent |>
  ggplot(aes(x = continent, y = meanLifeExp)) +
  geom_col() +
  coord_flip() +
  theme_bw()
```

Better than bar charts — Cleveland Dot Charts

```{r}
gapminder_2007_byContinent |>
  ggplot(aes(x = meanLifeExp, y = continent)) +
  geom_point() +
  theme_bw()
```

Sorting

```{r}
gapminder_2007_byContinent |>
  mutate(continent_ordered = fct_reorder(continent, meanLifeExp)) |>
  ggplot(aes(x = meanLifeExp, y = continent_ordered)) +
  geom_point() +
  theme_bw()
```

A complicated version of dot chart

```{r}
plot_fancy <- gapminder |>
  filter(year %in% c(1987, 2007)) |>
  mutate(year = factor(year)) |>
  group_by(continent, year) |>
  summarise(meanLifeExp = mean(lifeExp)) |>
  ggplot(aes(x = meanLifeExp, y = continent)) +
  geom_line(aes(group = continent)) +
  geom_point(aes(color = year)) +
  xlab("Avg Life Expetency") +
  ylab("Continent") +
  theme_bw()
```

Exporting

```{r}
ggsave("plot_fancy.png", width = 8, height =6)
```

## Lecture 3   

# Linter

```{r}
# clear all variables
rm(list = ls())

# library lintr
library(lintr)

# set style to tidyverse
lintr::use_lintr(type = "tidyverse")

# lint all files in the current project
lintr::lint_dir("/Users/er1kka/Desktop/Er1kKa's Local Documents/Ox_Core_ERM")
```
